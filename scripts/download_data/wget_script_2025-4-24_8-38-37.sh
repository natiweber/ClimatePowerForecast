#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-data.dkrz.de - 2025/04/24 06:38:37
# Search URL: https://esgf-data.dkrz.de/esg-search/wget?dataset_id=cordex.output.SAM-22.GERICS.MOHC-HadGEM2-ES.rcp85.r1i1p1.REMO2015.v1.3hr.sfcWind.v20191029|esgf1.dkrz.de
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-data.dkrz.de/esg-search/wget?dataset_id=cordex.output.SAM-22.GERICS.MOHC-HadGEM2-ES.rcp85.r1i1p1.REMO2015.v1.3hr.sfcWind.v20191029|esgf1.dkrz.de'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_200601010100-200612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_200601010100-200612302200.nc' 'SHA256' '38990956f4d0799eb848ceeaf072cb6f3cf385d4f1b588ad236df93f0f0d9530'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_200701010100-200712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_200701010100-200712302200.nc' 'SHA256' '9c13b4d56a7c8343eb12ba3539139e27ee3f024479da79c3bdaa0f54f82d2d3e'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_200801010100-200812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_200801010100-200812302200.nc' 'SHA256' '90115b0a0e6aa718d20343a5656458ebfd7012c2141be5abf3b4a7c6f8bcb2b2'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_200901010100-200912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_200901010100-200912302200.nc' 'SHA256' '5f2b66ecab2bd206fb00ce28ba165dfc08bbee5dc7e7853e201a8d211693bd2f'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201001010100-201012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201001010100-201012302200.nc' 'SHA256' '11772d76b2e8067f12a1f311d280c0bc1eab1d80f731bb03a26d386ebbca203a'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201101010100-201112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201101010100-201112302200.nc' 'SHA256' '6086cfd5e627a4fe08cc16c4a5309495615a29f212be30a5533f3326585909aa'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201201010100-201212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201201010100-201212302200.nc' 'SHA256' 'bc634c99ca657633b1cce8ee95048c1b0a0dbc6995f93de6fc61bcc9611dfe1e'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201301010100-201312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201301010100-201312302200.nc' 'SHA256' '8ea8cbeec83d8c8cee361925d6f4792bdcf786d43b1487f978e61c5f234a6cde'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201401010100-201412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201401010100-201412302200.nc' 'SHA256' '36f85d79ae443a628f1e6df8618d49ff037a958f2f09eb968f8bf204de0da5e4'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201501010100-201512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201501010100-201512302200.nc' 'SHA256' '532a5876861d187c0175f9c3b1ce5fe87f01324f9059c48eb71ea72ed0ab81e6'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201601010100-201612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201601010100-201612302200.nc' 'SHA256' '20922c639ec642020f1930c15c5664371e60dcd55f5d16901aecfe70271f6061'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201701010100-201712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201701010100-201712302200.nc' 'SHA256' 'ffd8cbaeeadfcc8400b37163ce72c5b28e2c22b5ee4a3539bcb029d96b13d6b9'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201801010100-201812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201801010100-201812302200.nc' 'SHA256' '5509eae42154d0ea4f65d985548eb870cd42d7defd35879f2ca3a232cad6845c'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201901010100-201912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_201901010100-201912302200.nc' 'SHA256' '73fe68e7c3764ea3bf1496231b737c42a1095e699415ed8c4324401cfb7474e8'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202001010100-202012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202001010100-202012302200.nc' 'SHA256' 'cbf375c67bbefaa53bd455f33c607cfc24deac425eb6c1786a89b5285fd23ae8'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202101010100-202112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202101010100-202112302200.nc' 'SHA256' '33f302055bbc152bd7826eb517ce30235c3e8dcf6400a9cf5b90661ec01fdfbf'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202201010100-202212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202201010100-202212302200.nc' 'SHA256' 'e9f03da5a29f5dcf516c26921829e10ebea7f3c9d88458c86656365a18d6a992'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202301010100-202312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202301010100-202312302200.nc' 'SHA256' '23caca9a178835170dd193e2537cfdf6b1ff1335312eb6283e153df7b9ea3d3e'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202401010100-202412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202401010100-202412302200.nc' 'SHA256' '9dda54d78c4cb634365cc40fbd454081afce1fa75bbbdb5f064780358ab19e78'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202501010100-202512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202501010100-202512302200.nc' 'SHA256' 'f52ef57dab491c561a4beea6544009073053e80a35bef44d92f4dc47f56b99b4'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202601010100-202612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202601010100-202612302200.nc' 'SHA256' 'c422b56a1452b7d31384cc22173800b2792ce557755116da5000fa55cbd24f38'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202701010100-202712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202701010100-202712302200.nc' 'SHA256' '10f87a9a4658ef1d78267cfa3dd1137d32e46cd23b954d2692a4ca8857bc2e66'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202801010100-202812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202801010100-202812302200.nc' 'SHA256' '6f8c3ed758b99edeed51491b9f9b5e5e42aac65b0f93260f4b2ab9a10a32a6bb'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202901010100-202912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_202901010100-202912302200.nc' 'SHA256' '09f6791b02ae51ff11517f5d208578831f6c5cc0e857c05ab288175016579d4b'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203001010100-203012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203001010100-203012302200.nc' 'SHA256' '56601b5c0eaa28ae9b87fb5d433a4a506a0d565d8b03f9e59a31286772af3711'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203101010100-203112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203101010100-203112302200.nc' 'SHA256' '4eee14394eff361fa8ecdc021dc1a68d3afdf6010bd6a89bc5e64eca3aa98625'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203201010100-203212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203201010100-203212302200.nc' 'SHA256' '3df334a94b51daea86752b463b1e81db98d7b15c93f4500009e6974e08d0d109'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203301010100-203312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203301010100-203312302200.nc' 'SHA256' 'afc92d07f69fed0366192df66d587ae844cd6cb83d4e807be787ad969476a94b'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203401010100-203412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203401010100-203412302200.nc' 'SHA256' '1f85808f0a57bcf849c48ac3c301d79a80d0de830839e9281b599c6edb7965b8'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203501010100-203512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203501010100-203512302200.nc' 'SHA256' '3ccb5030f4b1acaf6df7b866c3d236bf6b8fe56f938db566940c2567293ffbe1'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203601010100-203612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203601010100-203612302200.nc' 'SHA256' '675d3a37f97871096e7f3c99886fa4b9bbe75a4be443879f552b1b4bbac23c62'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203701010100-203712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203701010100-203712302200.nc' 'SHA256' '0cb6a84af6c087ef6be408ceb9c463755e16d00b23950b968eccad4b3eb7bc67'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203801010100-203812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203801010100-203812302200.nc' 'SHA256' '80d2536acf8c60c1d777c3309920d5073a680bfe76166b5467325065220dfd81'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203901010100-203912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_203901010100-203912302200.nc' 'SHA256' '82e83ea67c6a7da7e3ccb19149094f787a7c1bdf03d5fa1c18f8493b2a3a5dac'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204001010100-204012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204001010100-204012302200.nc' 'SHA256' 'cdfcdee1dbc35b6dfb10e51c1fa2117acd30f622647ab982a2531e6e53e4b2ff'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204101010100-204112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204101010100-204112302200.nc' 'SHA256' '3bb4a326f4613fc1b5ceff39f2fac85b6a9dce12487d38841a9761059de012db'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204201010100-204212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204201010100-204212302200.nc' 'SHA256' '8ccc84c06bf54b1a96bc76b9b3c5dad76808cc4e9cff6559da365b8b3059ca06'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204301010100-204312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204301010100-204312302200.nc' 'SHA256' '96e4871123ef50969bed31842df9eb92790fbe94fc8766fa2d14f7e626929650'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204401010100-204412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204401010100-204412302200.nc' 'SHA256' 'e80411de6346058148935fb4b118104cd268e774830f3ffb0d53e313a7a6445d'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204501010100-204512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204501010100-204512302200.nc' 'SHA256' '0f1f4c08c8f8f270988faffe4d991d9e4abd6baaf1c97cfcab3271b47bda415c'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204601010100-204612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204601010100-204612302200.nc' 'SHA256' '6199d343097964da7eecb24f829ca57bb65c8dcf8054346300d76f71cf5179b3'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204701010100-204712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204701010100-204712302200.nc' 'SHA256' '0988da33bf82501b7c66977352b74e5cd3e5aa6d9cb8d8b4e310e0110d1d3792'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204801010100-204812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204801010100-204812302200.nc' 'SHA256' '10b9fc5394b6c41c9c456d032216a973bd66e2637eab045006bdc5cf7862af06'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204901010100-204912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_204901010100-204912302200.nc' 'SHA256' '8ea26ab45a839093319365a9fd201940cc23526f3173230633e64933d2d984c5'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205001010100-205012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205001010100-205012302200.nc' 'SHA256' '8879e9582b76974df517389cb3c0012314924793590cf30c41671d278affca6b'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205101010100-205112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205101010100-205112302200.nc' 'SHA256' '77ce4e29382ed30d7746813172818724c7a353d4bc2a8e93c658ad18c23771a8'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205201010100-205212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205201010100-205212302200.nc' 'SHA256' 'ac7013d3e2c31701fb22e60bee32bd658795130400bd0d58b500e3dcb63e8736'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205301010100-205312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205301010100-205312302200.nc' 'SHA256' 'c7918dc86c7d4daa340f496b67298b4ec76b8bc0dc523f5bcc32e54da58202bd'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205401010100-205412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205401010100-205412302200.nc' 'SHA256' 'ee38a2016bafb29023d994fe86965bcc22317b083e920fd9e010b36cc171c743'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205501010100-205512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205501010100-205512302200.nc' 'SHA256' 'bc8d40baba7285c8abc9b9e6bd29bf64f0f0e37d75be7077091308093c3d0773'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205601010100-205612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205601010100-205612302200.nc' 'SHA256' 'dfd8f1c4aabfe2b3b299f76a2c369f7f6e803bf145ddfb6fc5eb166d7bcd3137'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205701010100-205712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205701010100-205712302200.nc' 'SHA256' '501e7e267f38519569755cdd11698b87e26d25a3e30bb3073d42368bd9223212'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205801010100-205812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205801010100-205812302200.nc' 'SHA256' 'fa3516541575516d33f9d8e5d2633e7beee81d51d309c02f8ae6cd7fb6b29ee8'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205901010100-205912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_205901010100-205912302200.nc' 'SHA256' 'd55500a7c4e208a1831d6d0b1dda3b4be795385d77fad68609d9d61a7f434864'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206001010100-206012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206001010100-206012302200.nc' 'SHA256' '8e817ad48ba5631eeffc92e353a7e7a013aa60fe2d921e215662865299f7b736'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206101010100-206112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206101010100-206112302200.nc' 'SHA256' 'd7de116d54617dda07d62e817213529f656c763f24ad85021315b02a2cc18f32'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206201010100-206212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206201010100-206212302200.nc' 'SHA256' 'd82b5696ec0b8e1cfb5d1f2d42d3dbc8683044bdb8479bbdd284412405506524'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206301010100-206312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206301010100-206312302200.nc' 'SHA256' 'dd1225bb819b85cb92ea8c4e214eaf4c00af659dd9a642177ee6095553aa2e34'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206401010100-206412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206401010100-206412302200.nc' 'SHA256' '30f8f7b6d47de8aa371cfe0e018fd41a4331220fddad76f9ef82130da5eb07a9'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206501010100-206512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206501010100-206512302200.nc' 'SHA256' '0a6b10575ce5702c7de2e93ce5eddc0642bc2db0879b24a8f94202e4fff4b7dc'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206601010100-206612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206601010100-206612302200.nc' 'SHA256' '37bd3b8d4dca59ca932ecd35376648c92e95f05d9b38d61b6e4152a6fd09d6a4'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206701010100-206712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206701010100-206712302200.nc' 'SHA256' '98a79f2a2a7c6c00e0ca468937b30e4f575af0e30c39eb5e6dea0d88365e7d08'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206801010100-206812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206801010100-206812302200.nc' 'SHA256' '12ff459aa2a16a09c271cab524f9b086644a5f4a43277ee77a10c0191460180e'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206901010100-206912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_206901010100-206912302200.nc' 'SHA256' '8f0c46d960d4e8c413035619996779e3dd01eb39ff5c7e02a6e62cb256337636'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207001010100-207012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207001010100-207012302200.nc' 'SHA256' 'f9662ad70eb32e09d5e86b8e17defb1b6bd3eefff1100a82cb585013f84aa06a'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207101010100-207112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207101010100-207112302200.nc' 'SHA256' '669b3c8ea6aedb9cf5a5ed20808c350dce68aa64f114b5956d71c70f638bac7a'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207201010100-207212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207201010100-207212302200.nc' 'SHA256' 'ab4d6487d825bd1f4b7d6717ad01f3c34215335e6974371dcc29917f24857b7d'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207301010100-207312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207301010100-207312302200.nc' 'SHA256' 'a20de71e575372fd4bb75b351635556a2dce166e60c0007b2ef26fd92446abaf'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207401010100-207412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207401010100-207412302200.nc' 'SHA256' '94caf2b4805f9b74996ca380387756e53319f7572df54812aae68c34d69b67ed'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207501010100-207512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207501010100-207512302200.nc' 'SHA256' '19029c05a80ff1c487311647dc1e74811a1354de0aaaab0d19af75cb4bce54d3'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207601010100-207612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207601010100-207612302200.nc' 'SHA256' '2dbfaa0a6f5589394e0080dead60f87012e6af1f03877a3018ceafce05b69fc3'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207701010100-207712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207701010100-207712302200.nc' 'SHA256' '97e1f0796aa13e1c4df628914084225ad4d1b5d50170f48b8644038172b65f10'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207801010100-207812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207801010100-207812302200.nc' 'SHA256' '147bba41537c787926a73c7eb03f516d539640602e191f020d794e484764e0e5'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207901010100-207912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_207901010100-207912302200.nc' 'SHA256' '9f7ce2d31be7ff198c774fcb2e262ce80e8f8a7ac19d83cd1043a4e0bce93079'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208001010100-208012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208001010100-208012302200.nc' 'SHA256' '19413056880d9fca285f452159467bb1c555622f2575ea7907e1a6523889f7f9'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208101010100-208112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208101010100-208112302200.nc' 'SHA256' 'dc75c0253a3da7096eff2d98dcd61cdc5f5b3db90e7c09051d2443f27f0a0fd3'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208201010100-208212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208201010100-208212302200.nc' 'SHA256' '5f809923d7e393985a1a68c5f7912640a0f31a325ef104c30ff38a3a733cede4'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208301010100-208312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208301010100-208312302200.nc' 'SHA256' '6587aea46674d9c712638436b2948671e22ebfcb3455106af28192d56c583996'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208401010100-208412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208401010100-208412302200.nc' 'SHA256' '9242f7df078b795c31aa745a14728ace25590fad68477546b801a7a4786a4304'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208501010100-208512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208501010100-208512302200.nc' 'SHA256' 'e565f511161da5df45aba8e95a343323d564b1ad7a46b0c8779816f2cde4ea32'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208601010100-208612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208601010100-208612302200.nc' 'SHA256' '4a78975598394420f3211047238732bf4b678a65977b255fa01465aed53ad4c5'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208701010100-208712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208701010100-208712302200.nc' 'SHA256' '73698ffdd20bb3d98bf4d8fb21fdeb66dbb53b953135332287e1f109fd6bc0dd'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208801010100-208812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208801010100-208812302200.nc' 'SHA256' 'fe0aff731cab1970a25dee263dea4552f5ae956f783a6aacf61df027bab3b768'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208901010100-208912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_208901010100-208912302200.nc' 'SHA256' '202f450b9f256e1e338737a1eb40cae57d8ffb8e4d12c15a7d9cf6e177ef8e57'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209001010100-209012302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209001010100-209012302200.nc' 'SHA256' '4a231f444f9c3ce2905304aa4a8150e3b439eb7bcf57587104a51f46c54da1e8'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209101010100-209112302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209101010100-209112302200.nc' 'SHA256' '53deecd24d970f5732a89b1a1097aa0ebb9942795b811faf92d539615a30a6a4'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209201010100-209212302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209201010100-209212302200.nc' 'SHA256' '095103ca81628b6d1273fcfeb7032f4348f4979395e9a66a5accc904a3ac0be6'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209301010100-209312302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209301010100-209312302200.nc' 'SHA256' '19a529ed7909313b62099f647fc18a790e001d08cff3b807b84ff0c978408b79'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209401010100-209412302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209401010100-209412302200.nc' 'SHA256' '64d68a16e15d236a62145dc6d2a82df7a31cead6599bff46a1a73ae1e2b44e01'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209501010100-209512302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209501010100-209512302200.nc' 'SHA256' '798974e1d1727fc387cad00daf9511bb6bb0e7beaf9f8241d6250ef8ad01d3c6'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209601010100-209612302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209601010100-209612302200.nc' 'SHA256' '523de36b92195f818456eefcc3fb91b08957dc2c2ecc2f50431bba455a4fbc2c'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209701010100-209712302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209701010100-209712302200.nc' 'SHA256' '25501e11c2a79932ddaa2e8b34ebe4c3326fdc10d971c9e264a32ef7ab612e80'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209801010100-209812302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209801010100-209812302200.nc' 'SHA256' '0894bd2645649dc533daea3be7ee33b4152cf3c05285e678fd0df9b0aad2a992'
'sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209901010100-209912302200.nc' 'http://esgf1.dkrz.de/thredds/fileServer/cordex/cordex/output/SAM-22/GERICS/MOHC-HadGEM2-ES/rcp85/r1i1p1/GERICS-REMO2015/v1/3hr/sfcWind/v20191029/sfcWind_SAM-22_MOHC-HadGEM2-ES_rcp85_r1i1p1_GERICS-REMO2015_v1_3hr_209901010100-209912302200.nc' 'SHA256' '8342a7aab72c91a395a2e041750d27e4b209e368fe89f0873a37af5df053e593'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 94 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
